name: Build Debian Package

on:
  push:
    branches:
      - main  # 替换为你的主要分支名称，如 master
    tags:
      - 'v*.*.*'  # 监听以 v 开头的标签，例如 v1.0.0
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build-deb:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true  # 如果有子模块，可以启用

      # 2. 设置环境变量（可选：根据需要添加）
      - name: Set up environment
        run: |
          echo "PACKAGE_NAME=your-package" >> $GITHUB_ENV
          echo "VERSION=1.0.0" >> $GITHUB_ENV
          # 根据需要添加更多变量

      # 3. 安装构建依赖
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y devscripts build-essential fakeroot lintian

      # 4. 编译源代码（如果需要）
      - name: Compile source code
        run: |
          make build  # 确保 Makefile 中有 build 目标

      # 5. 运行测试（如果需要）
      - name: Run tests
        run: |
          make test  # 确保 Makefile 中有 test 目标

      # 6. 构建 Debian 包
      - name: Build the Debian package
        run: |
          make deb  # 确保 Makefile 中有 deb 目标

      # 7. 查找生成的 .deb 文件
      - name: Find built .deb packages
        id: find_deb
        run: |
          deb_path=$(find . -maxdepth 1 -type f -name "*.deb" | tr '\n' ' ')
          echo "deb_path=$deb_path" >> $GITHUB_ENV

      # 8. 上传 Debian 包作为构建产物
      - name: Upload Debian package as artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: debian-package
          path: ${{ env.deb_path }}

      # 9. 使用 lintian 检查 Debian 包
      - name: Lint the Debian package
        run: |
          for deb in $deb_path; do
            lintian "$deb"
          done

      # 10. 创建 GitHub Release（仅在推送标签时触发）
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.deb_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
